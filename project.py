import sqlite3
from time_module import timer
base = sqlite3.connect("school.db")
c = base.cursor()
from random import randint
import pickle
import time
from threading import Thread


# c.execute("drop table service_providers")
# c.execute("""create table service_providers( 
#     code int,
#     driver_name varchar(50),
#     vehicle_code int,
#    name varchar(50) ,
#     number int,
#    time int,
#    available varchar(3)


# )
# """)



def service_providers():
    c.execute('Delete from service_providers')
    l = []
    f1 = open("service_providers.dat" , 'ab')
    f2 = open("service_providers.dat" , 'rb')
    try: 
        while 1:
            d = pickle.load(f2) # to load all alloted codes to a list to prevent duplication
            l += [d]
    except:
        f2.close()
    #to check if code aldready exists
    code_name_1 = input("enter name of organization/driver: ")
    code_1 = randint(1000 , 9999)
        
    while {code_1 , 1} in l: #dict with key as code and value as one to check if it is repeated
        code_1 = randint(1000 , 9999)
    d = {code_1: 1}
    pickle.dump(d , f1)
    f1.close()

    types = int(input("enter number of car models: "))
    vehicle_code_1 = 0
    for x in range(types):
        vehicle_code_1 += 1
            
        name_1 = input("enter car name: ")
        number_1 = int(input("enter number of units: "))
     
        time_1 = int(input("enter end time: "))
        others_1 = input("enter any other information: ")
        available_1 = "Yes"
        c.execute("insert into service_providers(code , driver_name ,vehicle_code, name,number, time , available) values({}, '{}',{}, '{}' , {} , {},'{}')".format(code_1 , code_name_1 ,vehicle_code_1, name_1 ,number_1, time_1 , available_1)) #syntax for user input insert into table
        #driver name, name(vehicle name), number(units), time are user input     code and vehicle_code are autogenerated available will depend on number
    base.commit()

def customers():
    print("code                 name                   vehicle code                car model        units available        duration of rental") #display of service provider details
    data = c.execute("select * from service_providers")
    for x in data.fetchall():
        for y in x:
            print(y , end = "                 ")
        print()
    
    code = int(input("enter preffered service provider code from the table (0 to abort booking): ")) #user to input one of the service provider codes
    if code == 0:
        return None
    data = c.execute("select code from service_providers")
    li = []
    for x in data.fetchall():
        
        li += [x[0]]
    print(li)
    while code not in li:
        print("code doesnt exist")
        code = int(input("enter preffered service provider code from the table (0 to abort booking): "))
        if code == 0:
            return None
            break
        
    print(".....")
    vehicle_code = int(input("enter vehicle code: "))
    data = c.execute("select code , vehicle_code , number from service_providers")  # to check if vehicle is available
    for x in c.fetchall():
        if x[0] == code and x[1] == vehicle_code:
            if x[2] > 0:
                time = int(input("enter time of rental: ")) #vehicle number to be reduces by one for the specified time period
                data = c.execute("select * from service_providers")
                l = []
                for i in data.fetchall():
                    print(i)
                    l += [i]
                data = l
                  
                for y in range(len(data)):

                    if (code , vehicle_code) == (data[y][0] , data[y][2]):
                        units = data[y][4]
                        print(units)
                        def reduce(code , vehicle_code, units , time):
                            if units == 0:
                                print("unsuccesful booking no units available")
                                return None
                               
                            else:
                                units -= 1
                            
                                data[y] = (data[y][0] , data[y][1] , data[y][2] , data[y][3] ,units ,data[y][5]  ,  data[y][6])
                                print(data)
                                c.execute('Delete from service_providers')
                                for z in data:
                                    code_1 , code_name_1 ,vehicle_code_1, name_1 ,number_1, time_1 , available_1 = z

                                    c.execute("insert into service_providers(code , driver_name ,vehicle_code, name,number, time , available) values({}, '{}',{}, '{}' , {} , {},'{}')".format(code_1 , code_name_1 ,vehicle_code_1, name_1 ,number_1, time_1 , available_1))
                                    base.commit()
                                    print('booking succesful')
                                    return True
                        reduce(data[y][0] , data[y][2] , units , data[y][5])




            else:
                print("booking unsuccesful no units available")
                customers()
                #recursive call if units unavailable

def increase_units(code , vehicle_code , units , time):
    data = c.execute("select * from service_providers")
    l = []
    for i in data.fetchall():
        print(i)
        l += [i]
    data = l
                  
    for y in range(len(data)):

        if (code , vehicle_code) == (data[y][0] , data[y][2]):
            units += 1
            data[y] = (data[y][0] , data[y][1] , data[y][2] , data[y][3] ,units ,data[y][5]  ,  data[y][6])

            c.execute('Delete from service_providers')
            for z in data:
                code_1 , code_name_1 ,vehicle_code_1, name_1 ,number_1, time_1 , available_1 = z

                c.execute("insert into service_providers(code , driver_name ,vehicle_code, name,number, time , available) values({}, '{}',{}, '{}' , {} , {},'{}')".format(code_1 , code_name_1 ,vehicle_code_1, name_1 ,number_1, time_1 , available_1))
                base.commit()

 

# the_func = Thread(target = customers.func)
# the_func.start()


#main
choice = input('enter c for customer and s for service provider: ') 
if choice == 's':
    service_providers()
elif choice == 'c':
    customers()
    

    

    






    



