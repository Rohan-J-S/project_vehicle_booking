


# import sqlite3
# base = sqlite3.connect("school.db")
# c = base.cursor()
# # c.execute("""CREATE TABLE STATIONARY(
# #     S_ID varchar(20),
# #     Stationary_name  varchar(20),
# #     Company varchar(20),
# #     price int
    
# # )""")

# # c.execute("""CREATE TABLE CONSUMER(
# #     C_ID varchar(20),
# #     Consumer_name  varchar(20),
# #     Address varchar(20),
# #     S_ID varchar(20)
    
# # )""")

# # c.execute("INSERT INTO STATIONARY values('DP01' , 'Dot Pen' , 'ABC' , 10)")
# # c.execute("INSERT INTO STATIONARY values('PL02' , 'Pencil' , 'XYZ' , 6)")
# # c.execute("INSERT INTO STATIONARY values('ER05' , 'Eraser' , 'XYZ' , 7)")
# # c.execute("INSERT INTO STATIONARY values('PL01' , 'Pencil' , 'CAM' , 5)")
# # c.execute("INSERT INTO STATIONARY values('GP02' , 'Gel Pen' , 'ABC' , 15)")

# # c.execute("INSERT INTO CONSUMER values('01' , 'Good Learner' , 'Delhi' , 'PL01')")
# # c.execute("INSERT INTO CONSUMER values('06' , 'Write well' , 'Mumbai' , 'GP01')")
# # c.execute("INSERT INTO CONSUMER values('12' , 'Topper' , 'Delhi' , 'DP01')")
# # c.execute("INSERT INTO CONSUMER values('15' , 'Write & Draw' , 'Delhi' , 'PL02')")
# # c.execute("INSERT INTO CONSUMER values('16' , 'GMotivation' , 'Bangalore' , 'PL01')")


# data = c.execute("select * from STATIONARY")
# for x in data.fetchall():
#     print(x)

# print()
# data = c.execute("select * from CONSUMER")
# for x in data.fetchall():
#     print(x)
# print()
# data = c.execute("select * from consumer where Address='Delhi'")
# for x in data.fetchall():
#     print(x)

# print()
# data = c.execute("select * from stationary where Price>=8 AND Price<=15")
# for x in data.fetchall():
#     print(x)

# print()
# data = c.execute("SELECT CONSUMER.Consumer_name, CONSUMER.Address, STATIONARY.Company, STATIONARY.price FROM CONSUMER LEFT JOIN STATIONARY ON STATIONARY.S_ID = CONSUMER.S_ID")
# for x in data.fetchall():
#     print(x)

# print()
# c.execute("update stationary set Price=Price+2")

# print()
# data = c.execute("select distinct Company from stationary")
# for x in data.fetchall():
#     print(x)


# base.commit()





import sqlite3
from time_module import timer
base = sqlite3.connect("school.db")
c = base.cursor()
from random import randint
import pickle
import time
from datetime import datetime
from threading import Thread
from tabulate import tabulate

# c.execute("drop table service_providers")
# c.execute("""create table service_providers( 
#     code int,
#     driver_name varchar(50),
#     vehicle_code int,
#    name varchar(50) ,
#     number int,
#    start_time int,
#    end_time int,
#    cost_per_hr int,
#    others varchar(100)



# )
# """)



def service_providers():
    # c.execute('Delete from service_providers')
    l = []
    f1 = open("service_providers.dat" , 'ab')
    f2 = open("service_providers.dat" , 'rb')
    try: 
        while 1:
            d = pickle.load(f2) # to load all alloted codes to a list to prevent duplication
            l += [d]
    except:
        f2.close()
    #to check if code aldready exists
    code_name_1 = input("enter name of organization/driver: ")
    code_1 = randint(1000 , 9999)
        
    while {code_1 , 1} in l: #dict with key as code and value as one to check if it is repeated
        code_1 = randint(1000 , 9999)
    d = {code_1: 1}
    pickle.dump(d , f1)
    f1.close()

    types = int(input("enter number of car models: "))
    vehicle_code_1 = 0
    for x in range(types):
        vehicle_code_1 += 1
            
        name_1 = input("enter car name: ")
        number_1 = int(input("enter number of units: "))
        start_time_1 = int(input("enter start time (hour in integer format in 24 hour clock): "))
        end_time_1 = int(input("enter end time (hour in integer format in 24 hour clock): "))
        others_1 = input("enter any other information (less than 100 characters): ")
        # available_1 = "Yes"
        cost_per_hr_1 = int(input("enter cost per hour in rupees: "))  
        c.execute("insert into service_providers(code , driver_name ,vehicle_code, name,number, start_time ,end_time  , cost_per_hr , others) values({}, '{}',{}, '{}' , {} ,{}, {} , {} , '{}')".format(code_1 , code_name_1 ,vehicle_code_1, name_1 ,number_1, start_time_1 , end_time_1 ,  cost_per_hr_1 , others_1)) #syntax for user input insert into table
        #driver name, name(vehicle name), number(units), time are user input     code and vehicle_code are autogenerated available will depend on number
    print("thank you for registering with us")
    base.commit()

def customers():
    temp_list = [('code' , 'name' , 'vehilcle code' , 'car model' , 'units available' , 'start time' , "end time" , 'cost per hour' , 'other information')]

    #print("code                 name                   vehicle code                car model        units available        duration of rental") #display of service provider details
    data = c.execute("select * from service_providers")
    temp_list += data.fetchall()
 
    print(tabulate(temp_list))
    # for x in data.fetchall():
    #     for y in x:
    #         print(y , end = "                 ")
    #     print()
    
    code = int(input("enter preffered service provider code from the table (0 to abort booking): ")) #user to input one of the service provider codes
    if code == 0:
        return None
    data = c.execute("select code from service_providers")
    li = []
    for x in data.fetchall():
        
        li += [x[0]]
    print(li)
    while code not in li:
        print("code doesnt exist")
        code = int(input("enter preffered service provider code from the table (0 to abort booking): "))
        if code == 0:
            return None
            break
        
    print(".....")
    vehicle_code = int(input("enter vehicle code: "))

    data = c.execute("SELECT code , vehicle_code FROM service_providers")
    temp_l = []
    for x in c.fetchall():
        temp_l += [x]
    while (code , vehicle_code) not in temp_l:
        print("sorry that vehicle code doesnt exist please try again")
        vehicle_code = int(input("enter vehicle code: "))



    data = c.execute("select code , vehicle_code , number from service_providers")  # to check if vehicle is available

    for x in c.fetchall():
        if x[0] == code and x[1] == vehicle_code:
            
            if x[2] > 0:
                time = int(input("enter number of hours of rental: ")) #vehicle number to be reduces by one for the specified time period
                current_time = datetime.now().hour #current hour is stored
            
                data = c.execute("select * from service_providers")
                l = []
                for i in data.fetchall():
                    print(i)
                    l += [i]
                data = l
                  
                for y in range(len(data)):

                    if (code , vehicle_code) == (data[y][0] , data[y][2]):
                        units = data[y][4]
                        print(units)
                        def reduce(code , vehicle_code, units , start_time , end_time):
                            # print(current_time , time)
                            if units == 0 or not(start_time < current_time < current_time + time < end_time ):  #to check if time is within valid time limit 
                                if units == 0:   
                                    print("unsuccesful booking no units available")
                                else:
                                    print("sorry units not available for that time slot")
                                return None
                               
                            else:
                                units -= 1
                            
                                data[y] = (data[y][0] , data[y][1] , data[y][2] , data[y][3] ,units ,data[y][5]  ,  data[y][6],  data[y][7],  data[y][8])
                                print(data)
                                c.execute('Delete from service_providers')
                                for z in data:
                                    code_1 , code_name_1 ,vehicle_code_1, name_1 ,number_1, start_time_1 ,end_time_1 , cost_per_hr_1, others_1 = z

                                    c.execute("insert into service_providers(code , driver_name ,vehicle_code, name,number, start_time ,end_time  , cost_per_hr , others) values({}, '{}',{}, '{}' , {} ,{}, {} , {} , '{}')".format(code_1 , code_name_1 ,vehicle_code_1, name_1 ,number_1, start_time_1 ,end_time_1 , cost_per_hr_1, others_1))
                                    base.commit()
                                    print('booking succesful! Driver will pick you up at the provided adress shortly')
                                    return True
                        reduce(data[y][0] , data[y][2] , units , data[y][5] , data[y][6])



            else:
                print("booking unsuccesful no units available")
                customers()
                #recursive call if units unavailable


def increase_units(code , vehicle_code , units , time):
    data = c.execute("select * from service_providers")
    l = []
    for i in data.fetchall():
        print(i)
        l += [i]
    data = l
                  
    for y in range(len(data)):

        if (code , vehicle_code) == (data[y][0] , data[y][2]):
            units += 1
            data[y] = (data[y][0] , data[y][1] , data[y][2] , data[y][3] ,units ,data[y][5]  ,  data[y][6])

            c.execute('Delete from service_providers')
            for z in data:
                code_1 , code_name_1 ,vehicle_code_1, name_1 ,number_1, time_1 , available_1 = z

                c.execute("insert into service_providers(code , driver_name ,vehicle_code, name,number, time , available) values({}, '{}',{}, '{}' , {} , {},'{}')".format(code_1 , code_name_1 ,vehicle_code_1, name_1 ,number_1, time_1 , available_1))
                base.commit()

 

# the_func = Thread(target = customers.func)
# the_func.start()


#main

choice = input('enter c for customer and s for service provider: ') 
while choice not in ['c' , 's']:
    print("sorry that was an invalid input please input ('c' or 's') ")
    choice = input('enter c for customer and s for service provider: ')



if choice == 's':
    try: #exception handler to catch wrong input data type
        service_providers()
        data = c.execute("select * from  service_providers")
        for x in data.fetchall():
            print(x)
    except:
        print("sorry an error was raised please adhere to the input instructions")
        print("redirecting.....")
        service_providers()

elif choice == 'c':
    # try:  #exception handler to catch wrong input data type
    customers()
    # except:
    #     print("sorry an error was raised please adhere to the input instructions")
    #     print("redirecting.....")
    #     customers()


#function that checks if times in start and end time
# 3 parameters: start time , end time, duration of rental
# checks if current time , and current time + duration of rental is within start and end time
   







































   







































    

    




















    

    






    



